--- testdir/Compare.drek
+++ testdir/Compare.drek
@@ -25,7 +25,7 @@ do
 	cat foo2t
 	time ../drek $td >foo1 2>foo1t
 	cat foo1t
-	cmp foo1 foo2 || ( echo $i '	' bad; echo $i '	' bad >/dev/tty; diff foo1 foo2 | sed 20q )
+	diff -b foo1 foo2 || ( echo $i '	' bad; echo $i '	' bad >/dev/tty; diff foo1 foo2 | sed 20q )
 	echo '>>>' $i
 	echo
 	echo $i: >>footot
--- testdir/Compare.p
+++ testdir/Compare.p
@@ -9,7 +9,7 @@ do
 	echo "$i:"
 	$oldawk -f $i test.countries test.countries >foo1 
 	$awk -f $i test.countries test.countries >foo2 
-	if cmp -s foo1 foo2
+	if diff -b foo1 foo2 > foo3
 	then true
 	else echo -n "$i:	BAD ..."
 	fi
--- testdir/Compare.t
+++ testdir/Compare.t
@@ -9,7 +9,7 @@ do
 	echo "$i:"
 	$oldawk -f $i test.data >foo1 
 	$awk -f $i test.data >foo2 
-	if cmp -s foo1 foo2
+	if diff -b foo1 foo2 > foo3
 	then true
 	else echo -n "$i:	BAD ..."
 	fi
--- testdir/Compare.tt
+++ testdir/Compare.tt
@@ -41,7 +41,7 @@ do
 	cat foo2t
 	$time $awk -f $i $td >foo1 2>foo1t
 	cat foo1t
-	cmp foo1 foo2
+	diff -b foo1 foo2
 	echo $i: >>footot
 	cat foo1t foo2t >>footot
 done
--- testdir/T.csv
+++ testdir/T.csv
@@ -34,7 +34,7 @@ $1 ~ /try/ {	# new test
 			output = sprintf("./echo '"'"'%s'"'"' >foo2; ", $NF)
 		gsub(/\\t/, "\t", output)
 		gsub(/\\n/, "\n", output)
-		run = sprintf("cmp foo1 foo2 || echo test %d.%d failed",
+		run = sprintf("diff -b foo1 foo2 || echo test %d.%d failed",
 			nt, ++nt2)
 		# print  "input is", input
 		# print  "test is", test
--- testdir/T.expr
+++ testdir/T.expr
@@ -34,7 +34,7 @@ $1 ~ /try/ {	# new test
 			output = sprintf("./echo '"'"'%s'"'"' >foo2; ", $NF)
 		gsub(/\\t/, "\t", output)
 		gsub(/\\n/, "\n", output)
-		run = sprintf("cmp foo1 foo2 || echo test %d.%d failed",
+		run = sprintf("diff -b foo1 foo2 || echo test %d.%d failed",
 			nt, ++nt2)
 		# print  "input is", input
 		# print  "test is", test
--- testdir/T.exprconv
+++ testdir/T.exprconv
@@ -18,4 +18,4 @@ echo '1
 0
 1
 1' >foo2
-cmp foo1 foo2 || echo 'BAD: T.exprconv (1 > 0, etc.)'
+diff -b foo1 foo2 || echo 'BAD: T.exprconv (1 > 0, etc.)'
--- testdir/T.gawk
+++ testdir/T.gawk
@@ -14,7 +14,7 @@ $awk '
 	function test(foo) { test2(foo) }
 	function test2(bar) { bar[1] = 1 }
 ' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk arrayref'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk arrayref'
 
 # asgext
 ./echo '1 2 3
@@ -27,7 +27,7 @@ cmp -s foo1 foo2 || ./echo 'BAD: T.gawk arrayref'
 3
 1 2 3 a' >foo1
 $awk '{ print $3; $4 = "a"; print }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk asgext'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk asgext'
 
 # backgsub:
 ./echo 'x\y
@@ -40,7 +40,7 @@ $awk '{	x = y = $0
         gsub( /\\\\/, "A", x); print x
         gsub( "\\\\", "A", y); print y
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backgsub'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk backgsub'
 
 
 # backgsub2:
@@ -62,7 +62,7 @@ $awk '{	w = x = y = z = $0
         gsub( /\\\\/, "\\\\\\", y); print "	" y
 }
 ' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backgsub2'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk backgsub2'
 
 
 # backgsub3:
@@ -89,7 +89,7 @@ $awk '{	w = x = y = z = z1 = z2 = $0
         gsub( /a/, "\\\\\\&", z2); print "	" z2
 }
 ' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backgsub3'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk backgsub3'
 
 
 # backsub3:
@@ -116,7 +116,7 @@ $awk '{	w = x = y = z = z1 = z2 = $0
         sub( /a/, "\\\\\\&", z2); print "	" z2
 }
 ' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backsub3'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk backsub3'
 
 
 # backsub:
@@ -130,7 +130,7 @@ $awk '{	x = y = $0
         sub( /\\\\/, "\\\\", x); print x
         sub( "\\\\", "\\\\", y); print y
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backsub'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk backsub'
 
 
 
@@ -138,7 +138,7 @@ cmp -s foo1 foo2 || ./echo 'BAD: T.gawk backsub'
 # dynlj:  
 ./echo 'hello               world' >foo1
 $awk 'BEGIN { printf "%*sworld\n", -20, "hello" }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk dynlj'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk dynlj'
 
 # fsrs:  
 ./echo 'a b
@@ -163,7 +163,7 @@ BEGIN {
         split ($2,f," ")
         print $0;
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk fsrs'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk fsrs'
 
 # intest
 ./echo '0 1' >foo1
@@ -171,12 +171,12 @@ $awk 'BEGIN {
 	bool = ((b = 1) in c);
 	print bool, b	# gawk-3.0.1 prints "0 "; should print "0 1"
 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk intest'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk intest'
 
 # intprec:  
 ./echo '0000000005:000000000e' >foo1
 $awk 'BEGIN { printf "%.10d:%.10x\n", 5, 14 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk intprec'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk intprec'
 
 # litoct:  
 ./echo 'axb
@@ -186,7 +186,7 @@ a*b' >foo
 no match
 match' >foo1
 $awk '{ if (/a\52b/) print "match" ; else print "no match" }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk litoct'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk litoct'
 
 # math:  
 ./echo 'cos(0.785398) = 0.707107
@@ -205,7 +205,7 @@ $awk 'BEGIN {
 	printf "sqrt(pi ^ 2) = %f\n", sqrt(pi ^ 2)
 	printf "atan2(1, 1) = %f\n", atan2(1, 1)
 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk math'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk math'
 
 # nlfldsep:  
 ./echo 'some stuff
@@ -229,7 +229,7 @@ final
 $awk 'BEGIN { RS = "A" }
 {print NF; for (i = 1; i <= NF; i++) print $i ; print ""}
 ' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk nlfldsep'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk nlfldsep'
 
 # numsubstr:  
 ./echo '5000
@@ -239,12 +239,12 @@ cmp -s foo1 foo2 || ./echo 'BAD: T.gawk nlfldsep'
 1000
 000' >foo1
 $awk '{ print substr(1000+$1, 2) }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk numsubstr'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk numsubstr'
 
 # pcntplus:  
 ./echo '+3 4' >foo1
 $awk 'BEGIN { printf "%+d %d\n", 3, 4 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk pcntplus'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk pcntplus'
 
 # prt1eval:  
 ./echo 1 >foo1
@@ -254,7 +254,7 @@ $awk 'function tst () {
 }
 BEGIN { OFMT = "%.0f" ; print tst() }
 ' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk prt1eval'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk prt1eval'
 
 # reparse:  
 ./echo '1 axbxc 2' >foo
@@ -267,7 +267,7 @@ $awk '{	gsub(/x/, " ")
 	print $0
 	print $1, $2, $3
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk reparse'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk reparse'
 
 # rswhite:  
 ./echo '    a b
@@ -276,7 +276,7 @@ c d' >foo
 c d>' >foo1
 $awk 'BEGIN { RS = "" }
 { printf("<%s>\n", $0) }' foo  >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk rswhite'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk rswhite'
 
 # splitvar:  
 ./echo 'Here===Is=Some=====Data' >foo
@@ -285,7 +285,7 @@ $awk '{	sep = "=+"
 	n = split($0, a, sep)
 	print n
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk splitvar'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk splitvar'
 
 # splitwht:  
 ./echo '4
@@ -297,7 +297,7 @@ $awk 'BEGIN {
 	m = split(str, b, / /)
 	print m
 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk splitwht'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk splitwht'
 
 # sprintfc:  
 ./echo '65
@@ -307,7 +307,7 @@ foo' >foo
 B 66
 f foo' >foo1
 $awk '{ print sprintf("%c", $1), $1 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk sprintfc'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk sprintfc'
 
 # substr:  
 ./echo 'xxA                                      
@@ -334,7 +334,7 @@ $awk 'BEGIN {
 	print "xx" substr("abcdef", 7, 2)
 	exit (0)
 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk substr'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk substr'
 
 # fldchg:  
 ./echo 'aa aab c d e f' >foo
@@ -347,19 +347,19 @@ $awk '{	gsub("aa", "+")
 	print "2:", $0
 	print "2a:" "%" $1 "%" $2 "%" $3 "%" $4 "%" $5
 }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk fldchg'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk fldchg'
 
 # fldchgnf:  
 ./echo 'a b c d' >foo
 ./echo 'a::c:d
 4' >foo1
 $awk '{ OFS = ":"; $2 = ""; print $0; print NF }' foo >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk fldchgnf'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk fldchgnf'
 
 # funstack:
 # ./echo '	funstack test takes 5-10 sec, replicates part of T.beebe'
 $awk -f funstack.awk funstack.in >foo 2>&1
-cmp -s foo funstack.ok || ./echo 'BAD: T.gawk funstack'
+diff -b foo funstack.ok || ./echo 'BAD: T.gawk funstack'
 
 # OFMT from arnold robbins 6/02:
 #	5.7 with OFMT = %0.f is 6
@@ -368,7 +368,7 @@ $awk 'BEGIN {
 	OFMT = "%.0f"
 	print 5.7
 }' >foo2
-cmp -s foo1 foo2 || ./echo 'BAD: T.gawk ofmt'
+diff -b foo1 foo2 || ./echo 'BAD: T.gawk ofmt'
 
 
 ### don't know what this is supposed to do now.
@@ -387,4 +387,4 @@ cmp -s foo1 foo2 || ./echo 'BAD: T.gawk ofmt'
 ### 	a += 0                  # make a numeric only again
 ### 	print "a = ", a    # use a as string
 ### }' >foo2
-### cmp -s foo1 foo2 || ./echo 'BAD: T.gawk convfmt'
+### diff -b foo1 foo2 || ./echo 'BAD: T.gawk convfmt'
--- testdir/T.getline
+++ testdir/T.getline
@@ -10,7 +10,7 @@ BEGIN {
 	exit
 }
 ' >foo
-cmp -s foo1 foo || echo 'BAD: T.getline (bare getline)'
+diff -b foo1 foo || echo 'BAD: T.getline (bare getline)'
 
 who >foo1
 cat foo1 | $awk '
@@ -20,7 +20,7 @@ BEGIN {
 	exit
 }
 ' >foo
-cmp -s foo1 foo || echo 'BAD: T.getline (getline xxx)'
+diff -b foo1 foo || echo 'BAD: T.getline (getline xxx)'
 
 $awk '
 BEGIN {
@@ -29,7 +29,7 @@ BEGIN {
 	exit
 }
 ' >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (getline <file)'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (getline <file)'
 
 cat /etc/passwd | $awk '
 BEGIN {
@@ -38,7 +38,7 @@ BEGIN {
 	exit
 }
 ' >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (getline <"-")'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (getline <"-")'
 
 $awk '
 BEGIN {
@@ -47,7 +47,7 @@ BEGIN {
 	exit
 }
 ' /etc/passwd >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (getline <arg)'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (getline <arg)'
 
 $awk '
 BEGIN {
@@ -56,7 +56,7 @@ BEGIN {
 	exit
 }
 ' /etc/passwd >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (getline x <arg)'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (getline x <arg)'
 
 $awk '
 BEGIN {
@@ -65,7 +65,7 @@ BEGIN {
 	exit
 }
 ' /etc/passwd >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (cat arg | getline)'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (cat arg | getline)'
 
 $awk '
 BEGIN {
@@ -74,11 +74,11 @@ BEGIN {
 	exit
 }
 ' /etc/passwd >foo
-cmp -s /etc/passwd foo || echo 'BAD: T.getline (cat arg | getline x)'
+diff -b /etc/passwd foo || echo 'BAD: T.getline (cat arg | getline x)'
 
 $awk ' BEGIN { print getline <"/glop/glop/glop" } ' >foo
 echo '-1' >foo1
-cmp -s foo foo1 || echo 'BAD: T.getline (non-existent file)'
+diff -b foo foo1 || echo 'BAD: T.getline (non-existent file)'
 
 echo 'false false equal' >foo1
 $awk 'BEGIN {
@@ -90,9 +90,9 @@ $awk 'BEGIN {
 	if ($0==$1) printf "equal\n"
 	else printf "not equal\n"
 }' >foo2
-cmp -s foo1 foo2 || echo 1>&2 'BAD: T.getline bad $0 type in cmd|getline'
+diff -b foo1 foo2 || echo 1>&2 'BAD: T.getline bad $0 type in cmd|getline'
 
 echo 'L1
 L2' | $awk 'BEGIN { $0="old stuff"; $1="new"; getline x; print}' >foo1
 echo 'new stuff' >foo2
-cmp -s foo1 foo2 || echo 1>&2 'BAD: T.getline bad update $0'
+diff -b foo1 foo2 || echo 1>&2 'BAD: T.getline bad update $0'
--- testdir/T.misc
+++ testdir/T.misc
@@ -20,29 +20,29 @@ $awk '{ if (match($0, /^The big brown over the lazy dog/) == 0) {
 		printf("succeeded\n")
 	}
 } ' foo >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc ghosh RE bug'
+diff -b foo1 foo2 || echo 'BAD: T.misc ghosh RE bug'
 
 echo '123
 1234567890
 12345678901' >foo
 echo '12345678901' >foo1
 $awk 'length($0) > 10' foo >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc last number bug'
+diff -b foo1 foo2 || echo 'BAD: T.misc last number bug'
 
 # check some \ sequences in strings (ascii)
 echo HIJKL >foo1
 echo foo | $awk '{ print "H\x49\x4a\x4BL" }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc hex string cvt'
+diff -b foo1 foo2 || echo 'BAD: T.misc hex string cvt'
 
 echo 012x45 >foo1
 $awk 'BEGIN { print "0\061\62x\0645" }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc oct string cvt'
+diff -b foo1 foo2 || echo 'BAD: T.misc oct string cvt'
 
 # $i++ means ($i)++
 echo 3 5 | $awk '{ i = 1; print $i++ ; print $1, i }' >foo1
 echo '3
 4 1' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc bad field increment'
+diff -b foo1 foo2 || echo 'BAD: T.misc bad field increment'
 
 # makes sure that fields are recomputed even if self-assignment
 # take into account that subtracting from NF now rebuilds the record
@@ -325,23 +325,23 @@ grep 'line [45]' foo >/dev/null || echo 'BAD: T.misc lineno'
 
 echo 'x\y' >foo1
 $awk 'BEGIN { print "x\f\r\b\v\a\\y" }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc weird chars'
+diff -b foo1 foo2 || echo 'BAD: T.misc weird chars'
 
 echo 0 >foo1
 $awk '	BEGIN { exit }
 	{ print }
 	END { print NR }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc BEGIN exit'
+diff -b foo1 foo2 || echo 'BAD: T.misc BEGIN exit'
 
 echo 1 >foo1
 $awk '	{ exit }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc immmediate exit'
+diff -b foo1 foo2 || echo 'BAD: T.misc immmediate exit'
 
 echo 1 >foo1
 $awk '	{i = 1; while (i <= NF) {if (i == NF) exit; i++ } }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc immmediate exit 2'
+diff -b foo1 foo2 || echo 'BAD: T.misc immmediate exit 2'
 
 echo 1 >foo1
 $awk '	function f() {
@@ -349,7 +349,7 @@ $awk '	function f() {
 	}
 	{ if (f() == 1) exit }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc while return'
+diff -b foo1 foo2 || echo 'BAD: T.misc while return'
 
 echo 1 >foo1
 $awk '	function f() {
@@ -358,12 +358,12 @@ $awk '	function f() {
 	}
 	{ if (f() == 1) exit }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc while return'
+diff -b foo1 foo2 || echo 'BAD: T.misc while return'
 
 echo 1 >foo1
 $awk '	{i = 1; do { if (i == NF) exit; i++ } while (i <= NF) }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc immmediate exit 3'
+diff -b foo1 foo2 || echo 'BAD: T.misc immmediate exit 3'
 
 echo 1 >foo1
 $awk '	function f() {
@@ -371,12 +371,12 @@ $awk '	function f() {
 	}
 	{ if (f() == 1) exit }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc do return'
+diff -b foo1 foo2 || echo 'BAD: T.misc do return'
 
 echo 1 >foo1
 $awk '	{i = 1; do { if (i == NF) break; i++ } while (i <= NF); exit }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc immmediate exit 4'
+diff -b foo1 foo2 || echo 'BAD: T.misc immmediate exit 4'
 
 echo 1 >foo1
 $awk '	{ n = split($0, x)
@@ -384,12 +384,12 @@ $awk '	{ n = split($0, x)
 	 	if (i == 1)
 			exit } }
 	END { print NR }' /etc/passwd >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc immmediate exit 5'
+diff -b foo1 foo2 || echo 'BAD: T.misc immmediate exit 5'
 
 echo XXXXXXXX >foo1
 $awk 'BEGIN { s = "ab\fc\rd\be"
 	t = s; 	gsub("[" s "]", "X", t); print t }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc weird escapes in char class'
+diff -b foo1 foo2 || echo 'BAD: T.misc weird escapes in char class'
 
 $awk '{}' /etc/passwd glop/glop >foo 2>foo2
 grep "can't open.*glop" foo2 >/dev/null || echo "BAD: T.misc can't open"
@@ -408,7 +408,7 @@ c
 ' >foo
 echo 3 >foo1
 $awk 'BEGIN { RS = "" }; END { print NR }' foo >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc RS botch'
+diff -b foo1 foo2 || echo 'BAD: T.misc RS botch'
 
 $awk 'BEGIN \
 	{
@@ -421,7 +421,7 @@ grep 'source line 4' foo2 >/dev/null 2>&1 || echo 'BAD: T.misc continuation lin
 echo 111 222 333 >foo
 $awk '{ f[1]=1; f[2]=2; print $f[1], $f[1]++, $f[2], f[1], f[2] }' foo >foo2
 echo 111 111 222 2 2 >foo1
-cmp -s foo1 foo2 || echo 'BAD: T.misc $f[1]++'
+diff -b foo1 foo2 || echo 'BAD: T.misc $f[1]++'
 
 
 # These should be syntax errors
@@ -454,7 +454,7 @@ grep "non-terminated" foo >/dev/null || echo 1>&2 "BAD: T.misc bare quote fails
 
 ./echo '3' >foo1
 $awk 'BEGIN {printf("%c%c\n", 0, 0) }' | wc | $awk '{print $3}' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc null byte'
+diff -b foo1 foo2 || echo 'BAD: T.misc null byte'
 
 # non-terminated RE
 
@@ -488,28 +488,28 @@ b c
 de fg hi' >foo0
 $awk 'END { print NF, $0 }' foo0 >foo1
 awk '{ print NF, $0 }' foo0| tail -1 >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
+diff -b foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
 
 echo 'fg hi' >foo0
 $awk 'END { print NF, $0 }' foo0 >foo1
 awk '{ print NF, $0 }' foo0| tail -1 >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
+diff -b foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
 
 echo '' >foo0
 $awk 'END { print NF, $0 }' foo0 >foo1
 awk '{ print NF, $0 }' foo0| tail -1 >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
+diff -b foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
 
 # Check for nonzero exit status on I/O error.
 echo 'E 2' >foo1
 (trap '' PIPE; "$awk" 'BEGIN { print "hi"; }' 2>/dev/null; echo "E $?" >foo2) | :
-cmp -s foo1 foo2 || echo 'BAD: T.misc exit status on I/O error'
+diff -b foo1 foo2 || echo 'BAD: T.misc exit status on I/O error'
 
 # Check for clobbering of the lexer's regular expression buffer.
 # If the output is "a1" instead of "1b", /b/ clobbered /a/.
 echo 1b >foo1
 echo ab | $awk '{ sub(/a/, "b" ~ /b/); print }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.misc lexer regex buffer clobbered'
+diff -b foo1 foo2 || echo 'BAD: T.misc lexer regex buffer clobbered'
 
 # Check handling of octal \OOO and hex \xHH esc. seqs. in strings.
 echo 'hello888
@@ -523,4 +523,4 @@ $awk 'BEGIN { print "hello\x000A" }' >> foo2
 $awk 'BEGIN { printf "hello\x0A" }'  >> foo2
 $awk 'BEGIN { print "hello\xGOO" }'  >> foo2
 $awk 'BEGIN { print "hello\x0A0A" }' >> foo2
-cmp -s foo1 foo2 || echo '�BAD: T.misc escape sequences in strings mishandled'
+diff -b foo1 foo2 || echo '�BAD: T.misc escape sequences in strings mishandled'
--- testdir/T.overflow
+++ testdir/T.overflow
@@ -8,7 +8,7 @@ $awk 'BEGIN {
  	exit
 }' >foo1
 $awk '{print}' foo1 >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow record 1'
+diff -b foo1 foo2 || echo 'BAD: T.overflow record 1'
 
 echo 'abcdefghijklmnopqsrtuvwxyz' >foo1
 echo hello | $awk '
@@ -16,7 +16,7 @@ echo hello | $awk '
    $0 = s
    print $1
  }'  >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow abcdef'
+diff -b foo1 foo2 || echo 'BAD: T.overflow abcdef'
 
 # default input record 3072, fields 200:
 $awk '
@@ -28,7 +28,7 @@ BEGIN {
 	}
 } ' >foo1
 $awk '{$1 = " 123456789"; print}' foo1 >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow -mr -mf set $1'
+diff -b foo1 foo2 || echo 'BAD: T.overflow -mr -mf set $1'
 
 $awk '
 BEGIN {
@@ -41,7 +41,7 @@ BEGIN {
 $awk  '{print NF}' foo >foo1
 echo '500
 500' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow -mr -mf NF'
+diff -b foo1 foo2 || echo 'BAD: T.overflow -mr -mf NF'
 
 rm -f core
 # this should not drop core
@@ -61,7 +61,7 @@ BEGIN {
 	x4 = sprintf("%-1000000.1000000s\n", "goodbye")
 	print length(x1 x2 x3 x4)
 }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow huge sprintfs'
+diff -b foo1 foo2 || echo 'BAD: T.overflow huge sprintfs'
 
 echo 0 >foo1
 $awk '
@@ -75,7 +75,7 @@ BEGIN {
 		n++
 	print n
 }' >foo2
-cmp -s foo1 foo2 || echo 'BAD: T.overflow big array'
+diff -b foo1 foo2 || echo 'BAD: T.overflow big array'
 
 echo x >foo1
 $awk '{print $40000000000000}' <foo1 >foo2 2>foo
--- testdir/try
+++ testdir/try
@@ -6,5 +6,5 @@ do
 	ind <$i
 	time ../a.exe -f $i $td >foo1
 	time /usr/bin/awk -f $i $td >foo2
-	cmp foo1 foo2
+	diff -b foo1 foo2
 done
--- testdir/yc
+++ testdir/yc
@@ -11,7 +11,7 @@ do
 	cd testdir
 	time awk -f $i test.data >foo1
 	time ../drek test.data >foo2
-	cmp foo1 foo2 || ( echo $i '	' bad; echo $i '	' bad >/dev/tty; diff foo1 foo2 )
+	diff -b foo1 foo2 || ( echo $i '	' bad; echo $i '	' bad >/dev/tty; diff foo1 foo2 )
 	echo '>>>' $i
 	echo
 done
