--- testdir/T.-f-f
+++ testdir/T.-f-f
@@ -32,4 +32,4 @@ echo '
 
 ]' >foo4
 $awk -f foo2 -f foo3 -f foo4 ./passwd >foo5 2>foo6
-grep 'syntax error.*file foo4' foo6 >/dev/null 2>&1 || echo 'BAD: T.-f-f source file name'
+grep 'syntax error.*file foo4' foo6 >NUL: 2>&1 || echo 'BAD: T.-f-f source file name'
--- testdir/T.argv
+++ testdir/T.argv
@@ -131,14 +131,14 @@ diff -b foo3 foo4 || echo 'BAD: T.argv startup FILENAME'
 
 
 # test data balanced on pinhead...
-echo 'ARGV[3] is /dev/null
+echo 'ARGV[3] is NUL:
 ARGV[0] is ../a.exe
-ARGV[1] is /dev/null' >foo1
+ARGV[1] is NUL:' >foo1
 
 $awk 'BEGIN {   # this is a variant of arnolds original example
-        ARGV[1] = "/dev/null"
+        ARGV[1] = "NUL:"
         ARGV[2] = "glotch"  # file open must skipped deleted argv
-        ARGV[3] = "/dev/null"
+        ARGV[3] = "NUL:"
         ARGC = 4
         delete ARGV[2]
 }
--- testdir/T.builtin
+++ testdir/T.builtin
@@ -35,7 +35,7 @@ if locale -a | grep -qsi de_DE.UTF-8; then
 	$awk '{ printf("%s|%s|%s\n", tolower($0), toupper($0), $0)}') >foo1
 	echo 'dürst|DÜRST|Dürst' >foo2
 	diff -b foo1 foo2 || echo 'BAD: T.builtin (toupper/tolower) for utf-8'
-	(export LC_NUMERIC=de_DE.UTF-8 && $awk 'BEGIN { print 0.01 }' /dev/null) >foo1
+	(export LC_NUMERIC=de_DE.UTF-8 && $awk 'BEGIN { print 0.01 }' NUL:) >foo1
 	echo "0.01" >foo2
 	diff -b foo1 foo2 || echo 'BAD: T.builtin LC_NUMERIC radix (.) handling' 
 fi
@@ -63,7 +63,7 @@ $awk 'BEGIN {
 	if (j != 3)
 		print "BAD: T.builtin (excess length args not evaluated)"
 }' 2>foo
-grep 'too many arg' foo >/dev/null || echo 'T.bad: too many args not caught'
+grep 'too many arg' foo >NUL: || echo 'T.bad: too many args not caught'
 
 echo 'a
 a b
@@ -82,7 +82,7 @@ B";
     print "CD"
 }
 EOF
-$awk -f foo0 /dev/null >foo1
+$awk -f foo0 NUL: >foo1
 cat << \EOF >foo2
 AB
 CD
--- testdir/T.clv
+++ testdir/T.clv
@@ -44,13 +44,13 @@ diff -b foo1 foo2 || echo 'BAD: T.clv (x=3 only)'
 
 # cmdline asgn then file
 echo 4 >foo1
-$awk 'BEGIN { getline; print x}' x=4 /dev/null >foo2
-diff -b foo1 foo2 || echo 'BAD: T.clv (x=4 /dev/null)'
+$awk 'BEGIN { getline; print x}' x=4 NUL: >foo2
+diff -b foo1 foo2 || echo 'BAD: T.clv (x=4 NUL:)'
 
 #cmdline asgn then file but no read of it
 echo 0 >foo1
-$awk 'BEGIN { x=0; getline <"/dev/null"; print x}' x=5 /dev/null >foo2
-diff -b foo1 foo2 || echo 'BAD: T.clv (x=5 /dev/null)'
+$awk 'BEGIN { x=0; getline <"NUL:"; print x}' x=5 NUL: >foo2
+diff -b foo1 foo2 || echo 'BAD: T.clv (x=5 NUL:)'
 
 #cmdline asgn then file then read
 echo 'xxx
@@ -60,25 +60,25 @@ echo '6
 end' >foo1
 $awk 'BEGIN { x=0; getline; print x}
       END { print x }' x=6 foo x=end >foo2
-diff -b foo1 foo2 || echo 'BAD: T.clv (x=6 /dev/null)'
+diff -b foo1 foo2 || echo 'BAD: T.clv (x=6 NUL:)'
 
 #cmdline asgn then file then read
 echo '0
 end' >foo1
-$awk 'BEGIN { x=0; getline <"/dev/null"; print x}
-      END { print x }' x=7 /dev/null x=end >foo2
-diff -b foo1 foo2 || echo 'BAD: T.clv (x=7 /dev/null)'
+$awk 'BEGIN { x=0; getline <"NUL:"; print x}
+      END { print x }' x=7 NUL: x=end >foo2
+diff -b foo1 foo2 || echo 'BAD: T.clv (x=7 NUL:)'
 
 #cmdline asgn then file then read; _ in commandname
 echo '0
 end' >foo1
-$awk 'BEGIN { _=0; getline <"/dev/null"; print _}
-      END { print _ }' _=7A /dev/null _=end >foo2
-diff -b foo1 foo2 || echo 'BAD: T.clv (_=7A /dev/null)'
+$awk 'BEGIN { _=0; getline <"NUL:"; print _}
+      END { print _ }' _=7A NUL: _=end >foo2
+diff -b foo1 foo2 || echo 'BAD: T.clv (_=7A NUL:)'
 
 # illegal varname in commandname
-$awk '{ print }' 99_=foo /dev/null >foo 2>foo2
-grep "can't open.*foo" foo2 >/dev/null 2>&1 || echo 'BAD: T.clv (7B: illegal varname)'
+$awk '{ print }' 99_=foo NUL: >foo 2>foo2
+grep "can't open.*foo" foo2 >NUL: 2>&1 || echo 'BAD: T.clv (7B: illegal varname)'
 
 # these test the new -v option:  awk ... -v a=1 -v b=2 'prog' does before BEGIN
 
@@ -126,14 +126,14 @@ echo 'BEGIN { print x, y, z1 }
 END { print x }' >foo0
 echo '123 abc 10.99
 4567' >foo1
-$awk -f foo0 -v x=123 -v y=abc -v z1=10.99 /dev/null x=4567 /dev/null >foo2
+$awk -f foo0 -v x=123 -v y=abc -v z1=10.99 NUL: x=4567 NUL: >foo2
 diff -b foo1 foo2 || echo 'BAD: T.clv (x=15)'
 
 echo 'BEGIN { print x, y, z1 }
 END { print x }' >foo0
 echo '123 abc 10.99
 4567' >foo1
-$awk -f foo0 -vx=123 -vy=abc -vz1=10.99 /dev/null x=4567 /dev/null >foo2
+$awk -f foo0 -vx=123 -vy=abc -vz1=10.99 NUL: x=4567 NUL: >foo2
 diff -b foo1 foo2 || echo 'BAD: T.clv (x=15a)'
 
 echo 'BEGIN { print x, y, z1 }
@@ -174,8 +174,8 @@ diff -b foo1 foo2 || echo 'BAD: T.clv (x=19)'
 
 
 $awk -vx 'BEGIN {print x}' >foo 2>&1
-grep 'invalid -v option argument: x' foo >/dev/null || echo 'BAD: T.clv (x=20)'
+grep 'invalid -v option argument: x' foo >NUL: || echo 'BAD: T.clv (x=20)'
 
 $awk -v x 'BEGIN {print x}' >foo 2>&1
-grep 'invalid -v option argument: x' foo >/dev/null || echo 'BAD: T.clv (x=20a)'
+grep 'invalid -v option argument: x' foo >NUL: || echo 'BAD: T.clv (x=20a)'
 
--- testdir/T.errmsg
+++ testdir/T.errmsg
@@ -197,19 +197,19 @@ test -r core && echo BAD: someone dropped core 1>&2
 echo xxx >foo0
 $awk '{print x}' x='a
 b' foo0 >foo1 2>foo2
-grep 'newline in string' foo2 >/dev/null || echo 'BAD: T.errmsg newline in string'
+grep 'newline in string' foo2 >NUL: || echo 'BAD: T.errmsg newline in string'
 
 $awk -safe 'BEGIN{"date" | getline}' >foo 2>foo2
-grep 'cmd | getline is unsafe' foo2 >/dev/null || echo 'BAD: T.errmsg cmd|getline unsafe'
+grep 'cmd | getline is unsafe' foo2 >NUL: || echo 'BAD: T.errmsg cmd|getline unsafe'
 
 $awk -safe 'BEGIN{print >"foo"}' >foo 2>foo2
-grep 'print > is unsafe' foo2 >/dev/null || echo 'BAD: T.errmsg print > unsafe'
+grep 'print > is unsafe' foo2 >NUL: || echo 'BAD: T.errmsg print > unsafe'
 
 $awk -safe 'BEGIN{print >> "foo"}' >foo 2>foo2
-grep 'print >> is unsafe' foo2 >/dev/null || echo 'BAD: T.errmsg print >> unsafe'
+grep 'print >> is unsafe' foo2 >NUL: || echo 'BAD: T.errmsg print >> unsafe'
 
 $awk -safe 'BEGIN{print | "foo"}' >foo 2>foo2
-grep 'print | is unsafe' foo2 >/dev/null || echo 'BAD: T.errmsg print | unsafe'
+grep 'print | is unsafe' foo2 >NUL: || echo 'BAD: T.errmsg print | unsafe'
 
 $awk -safe 'BEGIN {system("date")}' >foo 2>foo2
-grep 'system is unsafe' foo2 >/dev/null || echo 'BAD: T.errmsg system unsafe'
+grep 'system is unsafe' foo2 >NUL: || echo 'BAD: T.errmsg system unsafe'
--- testdir/T.flags
+++ testdir/T.flags
@@ -3,23 +3,23 @@ echo T.flags: test some commandline flags
 awk=${awk-../a.exe}
 
 $awk >foo 2>&1
-grep '[Uu]sage' foo >/dev/null || echo 'T.flags: bad usage'
+grep '[Uu]sage' foo >NUL: || echo 'T.flags: bad usage'
 
 $awk -f >foo 2>&1
-grep 'no program' foo >/dev/null || echo 'T.flags: bad no program'
+grep 'no program' foo >NUL: || echo 'T.flags: bad no program'
 
 $awk -f glop/glop >foo 2>&1
-grep 'can.t open' foo >/dev/null || echo 'T.flags: bad can.t open program'
+grep 'can.t open' foo >NUL: || echo 'T.flags: bad can.t open program'
 
 $awk -fglop/glop >foo 2>&1
-grep 'can.t open' foo >/dev/null || echo 'T.flags: bad can.t open program 2'
+grep 'can.t open' foo >NUL: || echo 'T.flags: bad can.t open program 2'
 
 $awk -zz 'BEGIN{}' >foo 2>&1
-grep 'unknown option' foo >/dev/null || echo 'T.flags: bad unknown option'
+grep 'unknown option' foo >NUL: || echo 'T.flags: bad unknown option'
 
 $awk -F  >foo 2>&1
-grep 'no field separator' foo >/dev/null || echo 'T.flags: bad missing field separator'
+grep 'no field separator' foo >NUL: || echo 'T.flags: bad missing field separator'
 
 ### Awk is now like gawk and splits into separate characters if FS = ""
 # $awk -F '' >foo 2>&1
-# grep 'field separator FS is empty' foo >/dev/null || echo 'T.flags: bad empty field separator'
+# grep 'field separator FS is empty' foo >NUL: || echo 'T.flags: bad empty field separator'
--- testdir/T.func
+++ testdir/T.func
@@ -37,7 +37,7 @@ BEGIN	{ code() }
 END	{ codeout("x") }
 function code() { ; }
 function codeout(ex) { print ex }
-' /dev/null >foo1
+' NUL: >foo1
 echo x >foo2
 diff -b foo1 foo2 || echo 'BAD: T.func (argument passing)'
 
--- testdir/T.misc
+++ testdir/T.misc
@@ -75,7 +75,7 @@ diff -b foo1 foo2 || echo 1>&2 "BAD: T.misc bad match of 8-bit char"
 
 echo hello |
 $awk 'BEGIN	{ FILENAME = "./passwd" }
-	{ print $0 }' >/dev/null
+	{ print $0 }' >NUL:
 if test -r core; then echo 1>&2 "BAD: T.misc ./passwd dropped core"; fi
 
 echo hello |
@@ -84,7 +84,7 @@ $awk '  function foo(foo) {
                 foo()
         }
 	{ foo(bar) }
-' >/dev/null 2>&1
+' >NUL: 2>&1
 if test -r core; then
 	echo 1>&2 "BAD: T.misc function foo(foo) dropped core"
 	rm -f core
@@ -107,12 +107,12 @@ $awk '
 function foo(x) { print "x is" x }
 BEGIN { foo(foo) }
 ' 2>foo
-grep "can't use function foo" foo >/dev/null || echo 1>&2 "BAD: T.misc fcn args"
+grep "can't use function foo" foo >NUL: || echo 1>&2 "BAD: T.misc fcn args"
 
 
 # gawk defref test; should give error about undefined function
 $awk 'BEGIN { foo() }' 2>foo
-grep "calling undefined function foo" foo >/dev/null || echo 1>&2 "BAD: T.misc undefined function"
+grep "calling undefined function foo" foo >NUL: || echo 1>&2 "BAD: T.misc undefined function"
 
 
 # gawk arrayparm test; should give error about function 
@@ -133,14 +133,14 @@ function bug2(arg) {
     bot[arg]=arg;
 }
 ' 2>foo
-grep "can.t assign to foo" foo >/dev/null || echo 1>&2 "BAD: T.misc foo bug"
+grep "can.t assign to foo" foo >NUL: || echo 1>&2 "BAD: T.misc foo bug"
 
 
 # This should be a syntax error
 $awk '
 !x = y
 ' 2>foo
-grep "syntax error" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error !x=y fails"
+grep "syntax error" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error !x=y fails"
 
 # This should print bbb
 $awk '
@@ -150,13 +150,13 @@ BEGIN { up[1] = "a"
 	exit
       }
 ' >foo
-grep bbb foo >/dev/null || echo 1>&2 "BAD: T.misc gsub failed"
+grep bbb foo >NUL: || echo 1>&2 "BAD: T.misc gsub failed"
 
 echo yes |
 $awk '
 BEGIN {
-	printf "push return" >"/dev/null"
-	getline ans <"/dev/null"
+	printf "push return" >"NUL:"
+	getline ans <"NUL:"
 } '
 if test -r core; then echo 1>&2 "BAD: T.misc getline ans dropped core"; fi
 
@@ -165,14 +165,14 @@ function unireghf(hfeed) { hfeed[1] = 0 }'
 if test -r core; then echo 1>&2 "BAD: T.misc unireghf dropped core"; fi
 
 echo x | $awk '/[/]/' 2>foo
-grep 'nonterminated character class' foo >/dev/null || error 'BAD: T.misc nonterminated fails'
+grep 'nonterminated character class' foo >NUL: || error 'BAD: T.misc nonterminated fails'
 if test -r core; then echo 1>&2 "BAD: T.misc nonterminated dropped core"; fi
 
 $awk '
 function f() { return 12345 }
 BEGIN { printf "<%s>\n", f() }
 ' >foo
-grep '<12345>' foo >/dev/null || echo 'BAD: T.misc <12345> fails'
+grep '<12345>' foo >NUL: || echo 'BAD: T.misc <12345> fails'
 
 echo 'abc
 def
@@ -184,7 +184,7 @@ BEGIN {	RS = ""
 	while (getline <"foo")
 		print
 }' >foo1
-$awk 'END {print NR}' foo1 | grep 4 >/dev/null || echo 'BAD: T.misc abcdef fails'
+$awk 'END {print NR}' foo1 | grep 4 >NUL: || echo 'BAD: T.misc abcdef fails'
 
 # Test for RS regex matching an empty record at EOF
 echo a | $awk 1 RS='a\n' > foo1
@@ -261,9 +261,9 @@ function expand(chart) {
 	getline chart < "CHAR.ticks"
 }
 ' >foo
-grep '^' foo >/dev/null && echo 'BAD: T.misc expand error'
+grep '^' foo >NUL: && echo 'BAD: T.misc expand error'
 
-$awk 'BEGIN { print 1e40 }' >/dev/null
+$awk 'BEGIN { print 1e40 }' >NUL:
 if test -r core; then echo 1>&2 "BAD: T.misc 1E40 dropped core"; fi
 
 # The following syntax error should not dump core:
@@ -271,17 +271,17 @@ $awk '
 $NF==3	{first=1}
 $NF==2 && first==0 && (abs($1-o1)>120||abs($2-o2)>120)	{print $0}
 $NF==2	{o1=%1; o2=$2; first=0}
-' 2>/dev/null
+' 2>NUL:
 if test -r core; then echo 1>&2 "BAD: T.misc first/abs dropped core"; fi
 
 # The following syntax error should not dump core:
 $awk '{ n = split($1, address, !); print address[1] }' 2>foo
-grep 'illegal statement' foo >/dev/null || echo 'BAD: T.misc split error'
+grep 'illegal statement' foo >NUL: || echo 'BAD: T.misc split error'
 if test -r core; then echo 1>&2 "BAD: T.misc split! dropped core"; fi
 
 # The following should cause a syntax error message
 $awk 'BEGIN {"hello"}' 2>foo
-grep 'illegal statement' foo >/dev/null || echo 'BAD: T.misc hello error'
+grep 'illegal statement' foo >NUL: || echo 'BAD: T.misc hello error'
 
 # The following should give a syntax error message:
 $awk '
@@ -291,11 +291,11 @@ function pile(c,     r) {
 
 { pile($1) }
 ' 2>foo
-grep 'context is' foo >/dev/null || echo 'BAD: T.misc pile error'
+grep 'context is' foo >NUL: || echo 'BAD: T.misc pile error'
 
 # This should complain about missing atan2 argument:
 $awk 'BEGIN { atan2(1) }' 2>foo
-grep 'requires two arg' foo >/dev/null || echo 'BAD: T.misc atan2 error'
+grep 'requires two arg' foo >NUL: || echo 'BAD: T.misc atan2 error'
 
 # This should not core dump:
 $awk 'BEGIN { f() }
@@ -306,22 +306,22 @@ if test -r core; then echo 1>&2 "BAD: T.misc delete dropped core"; fi
 # nasty one:  should not be able to overwrite constants
 $awk 'BEGIN { gsub(/ana/,"anda","banana")
 		printf "the monkey ate a %s\n", "banana" }
-' >/dev/null 2>foo
-grep 'syntax error' foo >/dev/null || echo 'BAD: T.misc gsub banana error'
+' >NUL: 2>foo
+grep 'syntax error' foo >NUL: || echo 'BAD: T.misc gsub banana error'
 
 # nasty one:  should not be able to overwrite constants
 $awk 'BEGIN { sub(/ana/,"anda","banana")
 		printf "the monkey ate a %s\n", "banana" }
-' >/dev/null 2>foo
-grep 'syntax error' foo >/dev/null || echo 'BAD: T.misc sub banana error'
+' >NUL: 2>foo
+grep 'syntax error' foo >NUL: || echo 'BAD: T.misc sub banana error'
 
 # line numbers used to double-count comments
 $awk '#
 #
 #
 /x
-' >/dev/null 2>foo
-grep 'line [45]' foo >/dev/null || echo 'BAD: T.misc lineno'
+' >NUL: 2>foo
+grep 'line [45]' foo >NUL: || echo 'BAD: T.misc lineno'
 
 echo 'x\y' >foo1
 $awk 'BEGIN { print "x\f\r\b\v\a\\y" }' >foo2
@@ -392,7 +392,7 @@ $awk 'BEGIN { s = "ab\fc\rd\be"
 diff -b foo1 foo2 || echo 'BAD: T.misc weird escapes in char class'
 
 $awk '{}' ./passwd glop/glop >foo 2>foo2
-grep "can't open.*glop" foo2 >/dev/null || echo "BAD: T.misc can't open"
+grep "can't open.*glop" foo2 >NUL: || echo "BAD: T.misc can't open"
 
 echo '
 
@@ -415,7 +415,7 @@ $awk 'BEGIN \
 		print "hello, world"
 	}
 }}}' >foo1 2>foo2
-grep 'source line 4' foo2 >/dev/null 2>&1 || echo 'BAD: T.misc continuation line number'
+grep 'source line 4' foo2 >NUL: 2>&1 || echo 'BAD: T.misc continuation line number'
 
 
 echo 111 222 333 >foo
@@ -426,28 +426,28 @@ diff -b foo1 foo2 || echo 'BAD: T.misc $f[1]++'
 
 # These should be syntax errors
 $awk . 2>foo
-grep "syntax error" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error . fails"
+grep "syntax error" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error . fails"
 
 $awk .. 2>foo
-grep "syntax error" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error .. fails"
+grep "syntax error" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error .. fails"
 
 $awk .E. 2>foo
-grep "syntax error" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error .E. fails"
+grep "syntax error" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error .E. fails"
 
 $awk .++. 2>foo
-grep "syntax error" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error .++. fails"
+grep "syntax error" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error .++. fails"
 
 
 
 # These should be syntax errors
 $awk '$' 2>foo
-grep "unexpected" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error $ fails"
+grep "unexpected" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error $ fails"
 
 $awk '{print $' 2>foo
-grep "unexpected" foo >/dev/null || echo 1>&2 "BAD: T.misc syntax error $2 fails"
+grep "unexpected" foo >NUL: || echo 1>&2 "BAD: T.misc syntax error $2 fails"
 
 $awk '"' 2>foo
-grep "non-terminated" foo >/dev/null || echo 1>&2 "BAD: T.misc bare quote fails"
+grep "non-terminated" foo >NUL: || echo 1>&2 "BAD: T.misc bare quote fails"
 
 
 # %c of 0 is explicit null byte
@@ -459,7 +459,7 @@ diff -b foo1 foo2 || echo 'BAD: T.misc null byte'
 # non-terminated RE
 
 $awk /xyz >foo 2>&1
-grep "non-terminated" foo >/dev/null || echo 1>&2 "BAD: T.misc non-terminated RE"
+grep "non-terminated" foo >NUL: || echo 1>&2 "BAD: T.misc non-terminated RE"
 
 # next several were infinite loops, found by brian tsang.
 # this is his example:
@@ -472,16 +472,16 @@ $awk 'BEGIN {
 	break
     }
 }' >foo 2>&1
-grep "illegal statement" foo >/dev/null || echo 1>&2 "BAD: T.misc looping syntax error 1"
+grep "illegal statement" foo >NUL: || echo 1>&2 "BAD: T.misc looping syntax error 1"
 
 $awk 'BEGIN { s { c /./ } }' >foo 2>&1
-grep "illegal statement" foo >/dev/null || echo 1>&2 "BAD: T.misc looping syntax error 2"
+grep "illegal statement" foo >NUL: || echo 1>&2 "BAD: T.misc looping syntax error 2"
 
 $awk 'BEGIN { s { c /../ } }' >foo 2>&1
-grep "illegal statement" foo >/dev/null || echo 1>&2 "BAD: T.misc looping syntax error 3"
+grep "illegal statement" foo >NUL: || echo 1>&2 "BAD: T.misc looping syntax error 3"
 
 $awk 'BEGIN {printf "%2$s %1$s\n", "a", "b"}' >foo 2>&1
-grep "'$' not permitted in awk formats" foo >/dev/null || echo 1>&2 "BAD: T.misc '$' not permitted in formats"
+grep "'$' not permitted in awk formats" foo >NUL: || echo 1>&2 "BAD: T.misc '$' not permitted in formats"
 
 echo 'a
 b c
@@ -502,7 +502,7 @@ diff -b foo1 foo2 || echo 'BAD: T.misc END must preserve $0'
 
 # Check for nonzero exit status on I/O error.
 echo 'E 2' >foo1
-(trap '' PIPE; "$awk" 'BEGIN { print "hi"; }' 2>/dev/null; echo "E $?" >foo2) | :
+(trap '' PIPE; "$awk" 'BEGIN { print "hi"; }' 2>NUL:; echo "E $?" >foo2) | :
 diff -b foo1 foo2 || echo 'BAD: T.misc exit status on I/O error'
 
 # Check for clobbering of the lexer's regular expression buffer.
--- testdir/T.overflow
+++ testdir/T.overflow
@@ -79,10 +79,10 @@ diff -b foo1 foo2 || echo 'BAD: T.overflow big array'
 
 echo x >foo1
 $awk '{print $40000000000000}' <foo1 >foo2 2>foo
-grep "out of range field" foo >/dev/null || echo 1>&2 "BAD: T.overflow \$400000"
+grep "out of range field" foo >NUL: || echo 1>&2 "BAD: T.overflow \$400000"
 
 rm -rf /tmp/awktestfoo*
 $awk 'BEGIN { for (i=1; i <= 1000; i++) print i >("/tmp/awktestfoo" i) }'
-ls /tmp/awktestfoo* | grep '1000' >/dev/null || echo 1>&2 "BAD: T.overflow openfiles"
+ls /tmp/awktestfoo* | grep '1000' >NUL: || echo 1>&2 "BAD: T.overflow openfiles"
 rm -rf /tmp/awktestfoo*
 exit 0
--- testdir/T.redir
+++ testdir/T.redir
@@ -30,9 +30,9 @@ diff -b foo1 foo2 || echo 'BAD: T.redir (buffering)'
 rm -f foo[12]
 $awk '{ print >"/dev/stderr" }' ./passwd 1>foo1 2>foo2
 diff -b foo2 ./passwd || echo 'BAD: T.redir (print >"/dev/stderr")'
-diff -b foo1 /dev/null  || echo 'BAD: T.redir (print >"/dev/stderr")'
+diff -b foo1 NUL:  || echo 'BAD: T.redir (print >"/dev/stderr")'
 
 rm -f foo[12]
 $awk '{ print >"/dev/stdout" }' ./passwd 1>foo1 2>foo2
 diff -b foo1 ./passwd || echo 'BAD: T.redir (print >"/dev/stdout")'
-diff -b foo2 /dev/null  || echo 'BAD: T.redir (print >"/dev/stderr")'
+diff -b foo2 NUL:  || echo 'BAD: T.redir (print >"/dev/stderr")'
--- testdir/chem.awk
+++ testdir/chem.awk
@@ -1,6 +1,6 @@
 BEGIN {
 	macros = "/usr/bwk/chem/chem.macros"	# CHANGE ME!!!!!
-	macros = "/dev/null" # since originals are lost
+	macros = "NUL:" # since originals are lost
 
 	pi = 3.141592654
 	deg = 57.29578
